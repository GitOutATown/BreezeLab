package com.aqume.breeze

import breeze.linalg._

object Breeze_lab_2_ws {
    println("====== Vectors =======")             //> ====== Vectors =======
    
	val v1 = DenseVector.zeros[Double](97)    //> v1  : breeze.linalg.DenseVector[Double] = DenseVector(0.0, 0.0, 0.0, 0.0, 0.
                                                  //| 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
                                                  //| , 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                  //|  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
                                                  //| 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0
                                                  //| .0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.
                                                  //| 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
                                                  //| , 0.0)
	
	val v2 = DenseVector.ones[Double](97)     //> v2  : breeze.linalg.DenseVector[Double] = DenseVector(1.0, 1.0, 1.0, 1.0, 1.
                                                  //| 0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0
                                                  //| , 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                                                  //|  1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 
                                                  //| 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1
                                                  //| .0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.
                                                  //| 0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0
                                                  //| , 1.0)
	
	val v3 = v1 + v2                          //> Dec 19, 2014 9:55:15 PM com.github.fommil.netlib.BLAS <clinit>
                                                  //| WARNING: Failed to load implementation from: com.github.fommil.netlib.Native
                                                  //| SystemBLAS
                                                  //| Dec 19, 2014 9:55:15 PM com.github.fommil.netlib.BLAS <clinit>
                                                  //| WARNING: Failed to load implementation from: com.github.fommil.netlib.Native
                                                  //| RefBLAS
                                                  //| v3  : breeze.linalg.DenseVector[Double] = DenseVector(1.0, 1.0, 1.0, 1.0, 1.
                                                  //| 0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0
                                                  //| , 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                                                  //|  1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 
                                                  //| 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1
                                                  //| .0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.
                                                  //| 0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0
                                                  //| , 1.0)
	
	//val v4 = v2 * v3 // error
	// in place multiplication
	val v4 = v2 :* v3                         //> v4  : breeze.linalg.DenseVector[Double] = DenseVector(1.0, 1.0, 1.0, 1.0, 1.
                                                  //| 0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0
                                                  //| , 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                                                  //|  1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 
                                                  //| 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1
                                                  //| .0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.
                                                  //| 0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0
                                                  //| , 1.0)
    // scaler multiplication
    val v5 = v2 :*= 4.0                           //> v5  : breeze.linalg.DenseVector[Double] = DenseVector(4.0, 4.0, 4.0, 4.0, 4.
                                                  //| 0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0
                                                  //| , 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
                                                  //|  4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 
                                                  //| 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4
                                                  //| .0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.
                                                  //| 0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0
                                                  //| , 4.0)
	
	println("\n====== Matrices =======")      //> 
                                                  //| ====== Matrices =======
	
	val m1 = DenseMatrix((1,2,3), (4,5,6))    //> m1  : breeze.linalg.DenseMatrix[Int] = 1  2  3  
                                                  //| 4  5  6  
	println("m1:\n" + m1 + "\n")              //> m1:
                                                  //| 1  2  3  
                                                  //| 4  5  6  
                                                  //| 
	
	val m2 = DenseMatrix.ones[Int](2,3)       //> m2  : breeze.linalg.DenseMatrix[Int] = 1  1  1  
                                                  //| 1  1  1  
	println("m2:\n" + m2 + "\n")              //> m2:
                                                  //| 1  1  1  
                                                  //| 1  1  1  
                                                  //| 
	
	val m3 = m1 + m2                          //> m3  : breeze.linalg.DenseMatrix[Int] = 2  3  4  
                                                  //| 5  6  7  
	println("m3:\n" + m3 + "\n")              //> m3:
                                                  //| 2  3  4  
                                                  //| 5  6  7  
                                                  //| 
    
    val m4 = m1 :+= 1                             //> m4  : breeze.linalg.DenseMatrix[Int] = 2  3  4  
                                                  //| 5  6  7  
    println("m4:\n" + m4 + "\n")                  //> m4:
                                                  //| 2  3  4  
                                                  //| 5  6  7  
                                                  //| 
    
    //val m5 = m1 * m4 // error
    
    println("m4.activeSize: " + m4.activeSize)    //> m4.activeSize: 6
    println("m4.size: " + m4.size)                //> m4.size: 6
    println("m4 dim: " + (m4.rows, m4.cols))      //> m4 dim: (2,3)
    println("m1 dim: " + (m1.rows, m1.cols))      //> m1 dim: (2,3)
    
    val m5 = m1 * m4.t                            //> m5  : breeze.linalg.DenseMatrix[Int] = 29  56   
                                                  //| 56  110  
    println("\nm5:\n" + m5)                       //> 
                                                  //| m5:
                                                  //| 29  56   
                                                  //| 56  110  
    
    val m6 = m1.t * m4                            //> m6  : breeze.linalg.DenseMatrix[Int] = 29  36  43  
                                                  //| 36  45  54  
                                                  //| 43  54  65  
    println("\nm6:\n" + m6)                       //> 
                                                  //| m6:
                                                  //| 29  36  43  
                                                  //| 36  45  54  
                                                  //| 43  54  65  
}