package com.aqume.breeze
import breeze.linalg._
import breeze.stats.distributions._

object warmup {
	val c = List(3,4,5,6)                     //> c  : List[Int] = List(3, 4, 5, 6)
	c.sum                                     //> res0: Int = 18
	c.foldLeft(0)((x,y) => x + y)             //> res1: Int = 18
	c.product                                 //> res2: Int = 360
	c.foldLeft(1)((x,y) => x * y)             //> res3: Int = 360
	c.foldRight(0)(_+_)                       //> res4: Int = 18
	c.reduce(_+_)                             //> res5: Int = 18
	c.reduce(_*_)                             //> res6: Int = 360
	
	//******* BREEZE *********//
	
	// Poisson
	val poi = Poisson(3.0)                    //> poi  : breeze.stats.distributions.Poisson = Poisson(3.0)
	poi.draw                                  //> res7: Int = 5
	poi.draw                                  //> res8: Int = 5
	val ps10 = poi.sample(10)                 //> ps10  : IndexedSeq[Int] = Vector(1, 4, 0, 2, 2, 2, 1, 5, 2, 5)
	ps10                                      //> res9: IndexedSeq[Int] = Vector(1, 4, 0, 2, 2, 2, 1, 5, 2, 5)
	ps10.sum                                  //> res10: Int = 24
	ps10.length                               //> res11: Int = 10
	val avg = ps10.sum.toDouble / ps10.length //> avg  : Double = 2.4
	poi.probabilityOf(2)                      //> res12: Double = 0.22404180765538775
	ps10 map { x => poi.probabilityOf(x) }    //> res13: IndexedSeq[Double] = Vector(0.14936120510359185, 0.16803135574154085,
                                                  //|  0.049787068367863944, 0.22404180765538775, 0.22404180765538775, 0.224041807
                                                  //| 65538775, 0.14936120510359185, 0.10081881344492458, 0.22404180765538775, 0.1
                                                  //| 0081881344492458)
  ps10 map(poi.probabilityOf(_))                  //> res14: IndexedSeq[Double] = Vector(0.14936120510359185, 0.16803135574154085,
                                                  //|  0.049787068367863944, 0.22404180765538775, 0.22404180765538775, 0.224041807
                                                  //| 65538775, 0.14936120510359185, 0.10081881344492458, 0.22404180765538775, 0.1
                                                  //| 0081881344492458)
  // Gauss
  val gau = Gaussian(0.0, 1.0)                    //> gau  : breeze.stats.distributions.Gaussian = Gaussian(0.0, 1.0)
  gau.draw                                        //> res15: Double = -0.5851465589652447
  gau.draw                                        //> res16: Double = -1.2523318944093105
	val gs1 = gau.sample(2000)                //> gs1  : IndexedSeq[Double] = Vector(1.3574849758876644, 0.30105308604549386, 
                                                  //| 1.9334862594844846, -0.4572684221586497, 0.0022399760743581263, 0.2929133791
                                                  //| 240623, 1.0755751945994931, -0.42817424393064996, 0.8192641189280709, -2.702
                                                  //| 0446848652333, 0.11491066508960844, -0.5683123163886286, -0.6717093348878594
                                                  //| , -0.8303893563458659, 0.15963309648397805, 2.0909026579068564, -1.117905098
                                                  //| 7832113, -1.2386140147093316, -0.7697037179771444, -0.12214430502360009, -1.
                                                  //| 3132921176194214, 0.2967495653172211, 0.4226677615717336, 1.821346272822307,
                                                  //|  0.23270648852479706, 2.1916019582502226, -0.6173484275147443, 0.00929185059
                                                  //| 9262024, -0.6507257232814349, 0.4410101856081011, -1.4421882333948763, -0.92
                                                  //| 60201822192003, 0.20465140713546223, -1.2806847835417505, 0.7888589300985198
                                                  //| , -1.2617133048007292, 0.3913911431226271, 1.234489927291294, -1.57011818652
                                                  //| 21863, 0.7065153325729208, -1.6694791659484352, -1.1780398136461387, -0.8339
                                                  //| 230611413113, -1.0414448
                                                  //| Output exceeds cutoff limit.
	gs1.sum / gs1.length                      //> res17: Double = -0.024181159329649114
	
	gs1 map { gau.logPdf(_)}                  //> res18: IndexedSeq[Double] = Vector(-1.840321263085039, -0.9642550135134305, 
                                                  //| -2.7881230910123245, -1.0234857381564033, -0.9189410419510795, -0.9618376570
                                                  //| 39611, -1.4973695328235415, -1.0106051247874646, -1.2545353814861668, -4.569
                                                  //| 461272708901, -0.9255407636803408, -1.080427977684177, -1.1445352484924178, 
                                                  //| -1.2637117747709234, -0.9316798959512042, -3.104875495625651, -1.54379443814
                                                  //| 74233, -1.686020871921857, -1.2151604399385925, -0.9263981488295218, -1.7813
                                                  //| 066263053248, -0.9629686854626525, -1.0082625515407027, -2.577589655966528, 
                                                  //| -0.9460146881054434, -3.320498104907778, -1.1094980736821365, -0.91898170244
                                                  //| 84521, -1.1306605166747459, -1.0161835251097187, -1.95889198347599, -1.34769
                                                  //| 52221433132, -0.9398796324259351, -1.7390152906023628, -1.2300877390027634, 
                                                  //| -1.7148987649602616, -0.995532046662091, -1.6809212234965047, -2.15157409302
                                                  //| 8532, -1.168520490784985, -2.3125188759726143, -1.6128274344723872, -1.26665
                                                  //| 23691563203, -1.46124217
                                                  //| Output exceeds cutoff limit.
  Gamma(2.0, 3.0).sample(5)                       //> res19: IndexedSeq[Double] = Vector(10.028006536100966, 8.489782799913092, 6.
                                                  //| 869413379455439, 7.231969489497007, 5.352994754436649)
}